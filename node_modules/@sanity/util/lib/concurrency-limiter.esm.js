class ConcurrencyLimiter {
  constructor(max) {
    this.max = max, this.current = 0, this.resolvers = [], this.ready = () => this.max === 1 / 0 ? Promise.resolve() : this.current < this.max ? (this.current++, Promise.resolve()) : new Promise((resolve) => {
      this.resolvers.push(resolve);
    }), this.release = () => {
      if (this.max === 1 / 0)
        return;
      const nextResolver = this.resolvers.shift();
      if (nextResolver) {
        nextResolver();
        return;
      }
      this.current = Math.max(0, this.current - 1);
    };
  }
}
export {
  ConcurrencyLimiter
};
//# sourceMappingURL=concurrency-limiter.esm.js.map
